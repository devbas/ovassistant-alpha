version: '3'
services: 
  redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    sysctls:
      net.core.somaxconn: 1024
    # volumes:
      # - redis-data:/data
    ports: 
      - 127.0.0.1:6379:6379
    networks: 
      - app
  # api:
  #   build: ./app/api/
  #   volumes: 
  #     - .:/var/www/ovassistant
  #     # - node_modules:/app/node_modules
  #   depends_on:
  #     - "redis"
  #   ports: 
  #     - 127.0.0.1:8000:8000
  #   # restart: always
  #   command: nodemon --exec node --max-old-space-size=8000 server.js
  #   networks: 
  #     - app
  nearest: 
    build: ./app/nearest/
    depends_on: 
      - redis
      - db
    ports: 
      - 127.0.0.1:9001:9001
    command: python calculate.py 
    volumes: 
      - ./app/nearest/:/usr/src/app
    networks: 
      - app
  db:  
    command: [
      '--disable-partition-engine-check',
      '--innodb-buffer-pool-size=1G'
    ] # Check more info about this command at: https://github.com/docker-library/mysql/issues/361
    ports: 
      - 127.0.0.1:3306:3306
    volumes: 
      - ./app/db/sql-scripts:/docker-entrypoint-initdb.d
      - ./app/db/cron/root:/etc/crontabs/root
      - ./app/db/cron-scripts:/home
    build: ./app/db/
    environment: 
      - MYSQL_DATABASE=ovassistant
      - MYSQL_ROOT_PASSWORD=root
    networks: 
      - app
  ingestion: 
    build: ./app/ingestion/
    volumes: 
      - ./app/ingestion/:/var/www/ovassistant/app/ingestion
      # - node_modules:/app/node_modules
    depends_on:
      - "redis"
      - "db"
    environment:
      - INGESTION_PERSIST=1
    ports: 
      - 127.0.0.1:8000:8000
    # command: nodemon --exec node --max-old-space-size=8000 server.js
    networks: 
      - app
  scoring: 
    build: ./app/scoring/
    volumes: 
      - ./app/scoring/:/var/www/ovassistant/app/scoring
    depends_on:
      - "redis"
    ports: 
      - 127.0.0.1:8001:8001
    networks: 
      - app
  frontend: 
    build: ./app/frontend/ 
    volumes: 
      - ./app/frontend:/var/www/ovassistant/app/frontend 
    ports: 
      - 127.0.0.1:5000:5000
    networks: 
      - app 
    depends_on: 
      - "db"
volumes:
  redis-data:
  node_modules:
networks: 
  app: