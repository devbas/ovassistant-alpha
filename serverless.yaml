service: steven-test

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'eu-central-1'}
  memorySize: 128  
  logRetentionInDays: 1
  environment:
    SERVICE_NAME: ${self:service}
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource:
          - { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ]]}
          - "arn:aws:s3:::${self:custom.name}-gtfs/*"
          - "arn:aws:s3:::${self:custom.name}-pb/*"
package:
  exclude:
    - .gitignore
    - .git/**

plugins:
  - serverless-offline
  - serverless-python-requirements
# - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
  name: steven-test-${self:provider.stage}
  db_username: test
  db_password: testtest
  db_name: test
  db_host_name: steventest
  gtfs_bucket: ${self:custom.name}-gtfs
  protobuf_bucket: ${self:custom.name}-pb
  env:
    REDIS_HOST:
      local: 'localhost'
      dev:
        'Fn::GetAtt': Redis.RedisEndpoint.Address 
      prod:
        'Fn::GetAtt': Redis.RedisEndpoint.Address 
custom_extra:
  domains:
    prod: api.ovassistent.stevenprins.com
    dev: dev-api.ovassistent.stevenprins.com
  customDomain:
    basePath: ""
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: "${self:provider.stage}"
    createRoute53Record: false

functions:
  map:
    name: ${self:custom.name}-map
    handler: app/map/index.handler
    runtime: nodejs10.x
    timeout: 20
    memorySize: 128
    events:
      - http:
          path: /map
          method: GET
  radius:
    name: ${self:custom.name}-radius
    handler: app/radius/index.handler
    runtime: nodejs10.x
    timeout: 20
    memorySize: 128
    environment:
      REDIS_HOST: ${self:custom.env.REDIS_HOST.${self:provider.stage}}
    events:
      - http:
          path: /radius
          method: GET
    vpc:
      securityGroupIds:
        - Ref: PrivateSecurityGroup
      subnetIds:
        - Ref: PrivateSubnet1a
  import_pb:
    name: ${self:custom.name}-import_pb
    handler: app/import_pb/index.handler
    runtime: nodejs10.x
    timeout: 60
    memorySize: 640
    vpc:
      securityGroupIds:
        - Ref: PrivateSecurityGroup
      subnetIds:
        - Ref: PrivateSubnet1a
    environment:
#      DB_HOST: 
#        'Fn::GetAtt': PostgresqlDatabaseInstance.Endpoint.Address
#      DB_USERNAME: ${self:custom.db_username}
#      DB_PASSWORD: ${self:custom.db_password}
#      DB_DB: ${self:custom.db_name}
      INGESTION_PERSIST: false
      REDIS_HOST: ${self:custom.env.REDIS_HOST.${self:provider.stage}}
    events:
      - s3:
          bucket: ${self:custom.protobuf_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads_pb/
            - suffix: .pb
  download_to_s3:
    name: ${self:custom.name}-download_to_s3
    handler: app/download_to_s3/index.handler
    runtime: nodejs10.x
    timeout: 900
    memorySize: 640
    events:
#      - schedule:
#          name: download_gtfs_nl
#          description: download gtfs from ovapi
#          rate: rate(1 minute)
#          enabled: false
#          input:
#            url: http://gtfs.ovapi.nl/nl/gtfs-nl.zip
#            name: uploads_gtfs/nl/gtfs-nl.zip
      - schedule:
          name: download_nl_vehiclePositions.pb
          description: download gtfs from ovapi
          rate: rate(1 minute)
          enabled: true
          input:
            url: http://gtfs.ovapi.nl/nl/vehiclePositions.pb
            name: uploads_pb/nl/vehiclePositions.pb
            bucket: ${self:custom.protobuf_bucket}
#      - schedule:
#          name: download_protobufs
#          description: download gtfs from ovapi
#          rate: rate(1 minute)
#          enabled: false
#          input:
#            url: http://gtfs.ovapi.nl/nl/alerts.pb
#            name: uploads_gtfs/nl/alerts.pb
#      - schedule:
#          name: download_nl_tripUpdates.pb
#          description: download gtfs from ovapi
#          rate: rate(1 minute)
#          enabled: false
#          input:
#            url: http://gtfs.ovapi.nl/nl/tripUpdates.pb
#            name: uploads_gtfs/nl/tripUpdates.pb
#      - schedule:
#          name: download_nl_trainUpdates.pb
#          description: download gtfs from ovapi
#          rate: rate(1 minute)
#          enabled: false
#          input:
#            url: http://gtfs.ovapi.nl/nl/trainUpdates.pb
#            name: uploads_gtfs/nl/trainUpdates.pb
  import_gtfs:
    name: ${self:custom.name}-import_gtfs
    handler: app/import_gtfs/index.handler
    runtime: nodejs10.x
    timeout: 20
    memorySize: 128
    vpc:
      securityGroupIds:
        - Ref: PrivateSecurityGroup
      subnetIds:
        - Ref: PrivateSubnet1a
    environment:
#      DB_HOST: 
#        'Fn::GetAtt': PostgresqlDatabaseInstance.Endpoint.Address
#      DB_USERNAME: ${self:custom.db_username}
#      DB_PASSWORD: ${self:custom.db_password}
#      DB_DB: ${self:custom.db_name}
    events:
      - s3:
          bucket: ${self:custom.gtfs_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads_gtfs/
            - suffix: .zip
  scoring:
    name: ${self:custom.name}-scoring
    handler: app/scoring/lambda.handler
    runtime: nodejs10.x
    timeout: 30
    memorySize: 128
    vpc:
      securityGroupIds:
        - Ref: PrivateSecurityGroup
      subnetIds:
        - Ref: PrivateSubnet1a
    environment:
      REDIS_HOST: 
        'Fn::GetAtt': Redis.RedisEndpoint.Address
#      DB_HOST: 
#        'Fn::GetAtt': PostgresqlDatabaseInstance.Endpoint.Address
     # DB_USER: ${self:custom.db_username}
     # DB_PASSWORD: ${self:custom.db_password}
    events:
      - http:
          path: /scoring
          method: ANY
      - http:
          path: /scoring/{any+}
          method: ANY
  frontend:
    name: ${self:custom.name}-frontend
    handler: app/frontend/lambda.handler
    runtime: nodejs10.x
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: /frontend
          method: ANY
      - http:
          path: /frontend/{any+}
          method: ANY
  nearest:
    name: ${self:custom.name}-nearest
    handler: app/nearest/calculate2
    runtime: python3.7
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: /nearest
          method: GET

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc connetion.
        Roles:
          - {"Ref" : "IamRoleLambdaExecution"}
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
###############################################################################
# Networking
###############################################################################
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: ${self:custom.name}-vpc
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: 
        Tags:
          - Key: Name
            Value: ${self:custom.name}-internet-gateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: 
          Ref: VPC
        InternetGatewayId:
          Ref: InternetGateway
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: 
          Ref: VPC
    InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
        RouteTableId: 
          Ref: RouteTable
    PublicSubnet1a:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: "10.0.1.0/24"
        AvailabilityZone: eu-central-1a
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.name}-public-subnet-1a
    PublicSubnet1aRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: 
          Ref: RouteTable
        SubnetId: 
          Ref: PrivateSubnet1a
    PublicSubnet1b:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: "10.0.2.0/24"
        AvailabilityZone: eu-central-1b
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.name}-public-subnet-1b
    PublicSubnet1bARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: 
          Ref: RouteTable
        SubnetId: 
          Ref: PublicSubnet1b
    PrivateSubnet1a:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: "10.0.10.0/24"
        AvailabilityZone: eu-central-1a
        Tags:
          - Key: Name
            Value: ${self:custom.name}-private-subnet-1a
    PrivateSubnet1aARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: 
          Ref: RouteTable
        SubnetId: 
          Ref: PrivateSubnet1a
    PrivateSubnet1b:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: "10.0.20.0/24"
        AvailabilityZone: eu-central-1b
        Tags:
          - Key: Name
            Value: ${self:custom.name}-private-subnet-1b
    PrivateSubnet1bARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: 
          Ref: RouteTable
        SubnetId: 
          Ref: PrivateSubnet1b
    PrivateSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: String
        GroupName: ${self:custom.name}-private-security-group
        SecurityGroupIngress:
          - IpProtocol: "-1"
        SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:custom.name}-private-security-group
        VpcId:
          Ref: VPC
    PrivateSecurityGroupIngressMysql:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
          GroupId:
            Ref: PrivateSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: PrivateSecurityGroup
    PrivateSecurityGroupIngressRedis:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
          GroupId:
            Ref: PrivateSecurityGroup
          IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId:
            Ref: PrivateSecurityGroup
    VPCS3Endpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcEndpointType: Gateway
        RouteTableIds: 
          - Ref: RouteTable
        ServiceName: com.amazonaws.eu-central-1.s3
        VpcId:
          Ref: VPC


###############################################################################
# REDIS
###############################################################################
    Redis:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        ClusterName: ovas-${self:provider.stage}-redis
        CacheNodeType: cache.t2.micro
        NumCacheNodes: 1
        Engine: redis
        VpcSecurityGroupIds:
          - Ref: PrivateSecurityGroup
        CacheSubnetGroupName:
          Ref: RedisSubnet
    RedisSubnet:
      Type: AWS::ElastiCache::SubnetGroup
      Properties: 
        CacheSubnetGroupName: ${self:custom.name}-redis-subnet-group
        Description: ${self:custom.name}-redis-subnet-group
        SubnetIds: 
          - Ref: PrivateSubnet1a
#          - Ref: PrivateSubnet1b

out-of-service-serverless:
    PostgresqlDatabase:
      #Type: AWS::RDS::DBInstance
      Type: AWS::RDS::DBCluster
      DeletionPolicy: Delete
      Properties:
        #VPCSecurityGroups: (for DBInstance)
        #  - Ref: PrivateSecurityGroup
        VpcSecurityGroupIds:
          - Ref: PrivateSecurityGroup
        DBSubnetGroupName:
          Ref: PostgresqlDatabaseSubnet
        #AllocatedStorage: '5'
        #DBInstanceClass: db.t2.micro
        #DBName: ${self:custom.name}
        #DBInstanceIdentifier: ${self:custom.name}-postgresql-master
        #Engine: MySQL
        Engine: aurora
        EngineMode: serverless
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 1
          MinCapacity: 1
          SecondsUntilAutoPause: 300
        MasterUsername: ${self:custom.db_username}
        MasterUserPassword: ${self:custom.db_password}
        AvailabilityZones: 
          - 'eu-central-1a'

out-of-service-postgres-working:
###############################################################################
# Postgresql
###############################################################################
#    PostgresqlDatabaseCluster:
#      Type: AWS::RDS::DBCluster
#      DeletionPolicy: Delete
#      Properties:
#        DBSubnetGroupName:
#          Ref: PostgresqlDatabaseSubnet
#        #VpcSecurityGroupIds:
#        #  - Ref: PrivateSecurityGroup
#        MasterUsername: ${self:custom.db_username}
#        MasterUserPassword: ${self:custom.db_password}
#        Engine: aurora-postgresql
#        EngineVersion: 11.2
#        DatabaseName: ${self:custom.db_host_name}
#        DBClusterIdentifier: ${self:custom.name}-postgresql-master
#        DBClusterParameterGroupName:
#          Ref: PostgresqlClusterParamGroup
    DBInstance1:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: Delete
      Properties:
        DBSubnetGroupName:
          Ref: DBSubnetGroup
#        DBClusterIdentifier:
#          Ref: DBInstance
        DBInstanceClass: db.t3.micro
        DBInstanceIdentifier: ${self:custom.name}-db-master
        #Engine: MySQL
        #EngineMode: serverless
        Engine: postgres
        AllocatedStorage: '5'
        MasterUsername: ${self:custom.db_username}
        MasterUserPassword: ${self:custom.db_password}
        EngineVersion: 11.2
        AutoMinorVersionUpgrade: true
        PubliclyAccessible: false
        EnablePerformanceInsights: true
        DBParameterGroupName:
          Ref: DBParamGroup
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupName: ${self:custom.name}-postgresql-subnet-group
        DBSubnetGroupDescription: ${self:custom.name}-postgresql-subnet-group
        SubnetIds: 
          - Ref: PrivateSubnet1a
          - Ref: PrivateSubnet1b
    DBParamGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: The parameter group for the postgres database
        Family: postgres11
        Parameters:
          log_connections: 0
#    PostgresqlClusterParamGroup:
#      Type: AWS::RDS::DBClusterParameterGroup
#      Properties:
#        Description: The parameter group for the postgres cluster
#        Family: postgres11
#        Parameters:
#          rds.force_ssl: 1

